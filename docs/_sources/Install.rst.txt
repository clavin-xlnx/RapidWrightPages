===========================
Install
===========================

What You Need to Get Started
==============================
1. Java JDK 11 (or later) - Any distribution such as `Adoptium
   <https://adoptium.net/>`_ should work. If you already have Vivado,
   it includes Java, see :ref:`Using Java distributed with Vivado` below on how to use it.
2. `Git <https://git-scm.com/>`_ (source revision control system)
3. If you are running Linux and want to run the GUI portion of RapidWright, you may need an older libpng12 library.  For those running Debian/Ubuntu-based distros, try the following:

.. code-block:: bash

	wget -O /tmp/libpng12.deb https://snapshot.debian.org/archive/debian/20160413T160058Z/pool/main/libp/libpng/libpng12-0_1.2.54-6_amd64.deb && sudo dpkg -i /tmp/libpng12.deb && rm /tmp/libpng12.deb
	
For CentOS/RedHat/Fedora distros, try the following:

.. code-block:: bash

	sudo yum install libpng12	
	
Additional Recommendations
============================
1. `Vivado Design Suite 2018.3 or later <https://www.xilinx.com/products/design-tools/vivado.html>`_  (Not essential to run RapidWright, but makes it useful)
2. An IDE such as:
    * `IntelliJ <https://www.jetbrains.com/idea/>`_
    * `Eclipse <https://www.eclipse.org/downloads/packages/>`_ 

RapidWright includes the `Gradle Wrapper <https://docs.gradle.org/current/userguide/gradle_wrapper.html>`_ (automatic build tool), so a
Gradle installation is not necessary.
	
Install Steps
========================
The easiest way to get RapidWright setup is to simply run these commands:

.. code-block:: bash

	git clone https://github.com/Xilinx/RapidWright.git
	cd RapidWright
	./gradlew compileJava


This will clone a copy of RapidWright from GitHub, download jar
dependencies and compile the Java code.  Checking out and compiling
the code can also be accomplished by using an IDE (see
:ref:`RapidWright Eclipse Setup` or :ref:`RapidWright IntelliJ Setup`). 

To perform a quick test to ensure RapidWright is setup correctly, try
running the following:
    
.. code-block:: bash
    
    java -cp bin:jars/* com.xilinx.rapidwright.device.browser.DeviceBrowser

.. note:: If you prefer to run with Gradle, the same tool can be invoked with: ``./gradlew run --args=DeviceBrowser``
    
You should see the GUI come up similar to this screenshot:

.. image:: images/DeviceBrowser.png
	:width: 550px
	:align: center
		
If you have gotten to this point, congrats!  Your RapidWright install
is correctly configured and you are ready to start experimenting.

Notes for Advanced/Legacy Users:
=====================================

Using Java distributed with Vivado
------------------------------------
The easiest way to find out where the Java runtime is packaged with
your installation of Vivado, is to run the following at the Vivado Tcl
prompt:

.. code-block:: tcl

	which java

Based on where your installed Vivado is located, it should produce a
full path, something like this:

.. code-block:: tcl

	/opt/Vivado/2022.2/tps/lnx64/jre11.0.11_9/bin/java

To use this version of Java instead of the system Java or installing
it, simply add the directory to your ``PATH`` environment variable:

.. code-block:: bash

	export PATH=/opt/Vivado/2022.2/tps/lnx64/jre11.0.11_9/bin:$PATH

Or, if using Windows, use the Control panel for environment variables
and add a new entry for ``PATH``.
	

CLASSPATH
-----------
Java has the notion of a CLASSPATH, this is a list of locations where
``java`` can look for compiled Java code (``.class`` files or ``.jar``
files) to execute at runtime.  The CLASSPATH can be set on the command
line (as in the example test command above) or it can be set via the
environment variable ``CLASSPATH``.  If a script to set the ``CLASSPATH``
variable (in Linux) is desired, the following command can be run:
    
.. code-block:: bash
    
    echo "export CLASSPATH=`pwd`/bin:`pwd`/jars/*" > bin/rapidwright_classpath.sh


    
This sets up the environment so the ``-cp bin:jars/*`` classpath option doesn't need to be set
as an argument when invoking ``java``, for example:

.. code-block:: bash

    source bin/rapidwright_classpath.sh
    java com.xilinx.rapidwright.device.browser.DeviceBrowser

Should start the ``DeviceBrowser`` just as before.
    

RAPIDWRIGHT_PATH
--------------------
The environment variable ``RAPIDWRIGHT_PATH`` is no longer required.
RapidWright data files have a default location (see
:ref:`RapidWright Data Files`).  To override the default location, the
environment variable ``RAPIDWRIGHT_PATH`` can be set and the data files will be
placed in ``$RAPIDWRIGHT_PATH/data``.
	

RapidWright Installer (Obsolete)
==================================
The RapidWright installer is no longer the preferred method of
installation.  Please use the steps above, it is included below for
legacy purposes.

1. Download :download:`rapidwright-installer.jar <files/rapidwright-installer.jar>` (or run command below in Linux) to the directory where you would like RapidWright to reside.

.. code-block:: bash

	wget http://www.rapidwright.io/docs/_downloads/rapidwright-installer.jar

2. From a terminal in that directory, run (To open a terminal on Windows, search and run 'cmd.exe' from the Start orb):

.. code-block:: bash

	java -jar rapidwright-installer.jar

3. Use one of the BASH/CSH/BAT scripts created at the end of the install to set the proper environment variables for subsequent invocations of RapidWright.
4. Setup your IDE (if applicable):

  * :ref:`RapidWright Eclipse Setup`
  * :ref:`RapidWright IntelliJ Setup`
  
Once complete, you can run the DeviceBrowser within your respective IDE to test the installation.
